// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account/account.proto

package account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountSV service

type AccountSVService interface {
	// 查询用户信息
	GetUserInfo(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserInfo, error)
	// 获取多个用户ID信息
	GetUsersInfoByIDS(ctx context.Context, in *UIDSInput, opts ...client.CallOption) (*UserInfoList, error)
	// 通过UserToken获取用户信息
	GetUserInfoByToken(ctx context.Context, in *UserToken, opts ...client.CallOption) (*UserInfo, error)
	// 创建用户
	CreateUserInfoByLoginName(ctx context.Context, in *CreateUserInput, opts ...client.CallOption) (*ErrorResponse, error)
	// 用户登录
	GetUserToken(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserInfoWithToken, error)
	// 检查昵称是否被使用
	CheckNickname(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error)
	// 检查手机是否被绑定
	CheckPhone(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error)
	// 检查邮箱是否被绑定
	CheckEmail(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error)
	// 检查用户名是否被使用
	CheckLoginName(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error)
	// 更新用户密码
	PutUserPassword(ctx context.Context, in *PutPassowrdRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 更新用户基础信息
	PutUserBaseInfo(ctx context.Context, in *PutUserBaseRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 通过第三方code获取用户token注册第账户
	GetUserTokenByOauthCode(ctx context.Context, in *OauthLoginRequest, opts ...client.CallOption) (*UserInfoWithToken, error)
	// 获取用户密码状态
	GetUserPasswordRandomStatus(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*PasswordRandomStatus, error)
	// 绑定邮箱
	BindUserContactEmail(ctx context.Context, in *PutUserContactEmailRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 绑定手机号
	BindUserContactPhone(ctx context.Context, in *PutUserContactPhoneRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 获取用户联系方式信息
	GetUserContactInfo(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserContact, error)
	// 获取用户角色
	GetUserNewRoles(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*NewRoleList, error)
	// 获取用户的权限
	GetUserPermissions(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*PermissionInfoList, error)
	// 设置角色
	SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 删除角色
	DelUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 新建角色 2020-02-24
	PostNewRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 更新角色
	PutNewRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 删除角色
	DelNewRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 获取所有角色
	GetNewRoles(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*NewRoleList, error)
	// 获取用户UID
	GetUserUID(ctx context.Context, in *CreateUserInput, opts ...client.CallOption) (*UIDInput, error)
	// vapcha验证
	GetVaptchaVerify(ctx context.Context, in *VaptchaVerifyRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// vapcha离线验证
	GetVaptchaOfflineVerify(ctx context.Context, in *VaptchaVerifyOfflineRequest, opts ...client.CallOption) (*ErrorResponse, error)
}

type accountSVService struct {
	c    client.Client
	name string
}

func NewAccountSVService(name string, c client.Client) AccountSVService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &accountSVService{
		c:    c,
		name: name,
	}
}

func (c *accountSVService) GetUserInfo(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUsersInfoByIDS(ctx context.Context, in *UIDSInput, opts ...client.CallOption) (*UserInfoList, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUsersInfoByIDS", in)
	out := new(UserInfoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserInfoByToken(ctx context.Context, in *UserToken, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserInfoByToken", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CreateUserInfoByLoginName(ctx context.Context, in *CreateUserInput, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CreateUserInfoByLoginName", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserToken(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserInfoWithToken, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserToken", in)
	out := new(UserInfoWithToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckNickname(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckNickname", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckPhone(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckPhone", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckEmail(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckEmail", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckLoginName(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckLoginName", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) PutUserPassword(ctx context.Context, in *PutPassowrdRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.PutUserPassword", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) PutUserBaseInfo(ctx context.Context, in *PutUserBaseRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.PutUserBaseInfo", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserTokenByOauthCode(ctx context.Context, in *OauthLoginRequest, opts ...client.CallOption) (*UserInfoWithToken, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserTokenByOauthCode", in)
	out := new(UserInfoWithToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserPasswordRandomStatus(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*PasswordRandomStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserPasswordRandomStatus", in)
	out := new(PasswordRandomStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) BindUserContactEmail(ctx context.Context, in *PutUserContactEmailRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.BindUserContactEmail", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) BindUserContactPhone(ctx context.Context, in *PutUserContactPhoneRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.BindUserContactPhone", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserContactInfo(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserContact, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserContactInfo", in)
	out := new(UserContact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserNewRoles(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*NewRoleList, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserNewRoles", in)
	out := new(NewRoleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserPermissions(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*PermissionInfoList, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserPermissions", in)
	out := new(PermissionInfoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.SetUserRole", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) DelUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.DelUserRole", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) PostNewRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.PostNewRole", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) PutNewRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.PutNewRole", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) DelNewRole(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.DelNewRole", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetNewRoles(ctx context.Context, in *NewRoleRequest, opts ...client.CallOption) (*NewRoleList, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetNewRoles", in)
	out := new(NewRoleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserUID(ctx context.Context, in *CreateUserInput, opts ...client.CallOption) (*UIDInput, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserUID", in)
	out := new(UIDInput)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetVaptchaVerify(ctx context.Context, in *VaptchaVerifyRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetVaptchaVerify", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetVaptchaOfflineVerify(ctx context.Context, in *VaptchaVerifyOfflineRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetVaptchaOfflineVerify", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountSV service

type AccountSVHandler interface {
	// 查询用户信息
	GetUserInfo(context.Context, *UIDInput, *UserInfo) error
	// 获取多个用户ID信息
	GetUsersInfoByIDS(context.Context, *UIDSInput, *UserInfoList) error
	// 通过UserToken获取用户信息
	GetUserInfoByToken(context.Context, *UserToken, *UserInfo) error
	// 创建用户
	CreateUserInfoByLoginName(context.Context, *CreateUserInput, *ErrorResponse) error
	// 用户登录
	GetUserToken(context.Context, *UserLoginRequest, *UserInfoWithToken) error
	// 检查昵称是否被使用
	CheckNickname(context.Context, *UserInfo, *ErrorResponse) error
	// 检查手机是否被绑定
	CheckPhone(context.Context, *UserInfo, *ErrorResponse) error
	// 检查邮箱是否被绑定
	CheckEmail(context.Context, *UserInfo, *ErrorResponse) error
	// 检查用户名是否被使用
	CheckLoginName(context.Context, *UserInfo, *ErrorResponse) error
	// 更新用户密码
	PutUserPassword(context.Context, *PutPassowrdRequest, *ErrorResponse) error
	// 更新用户基础信息
	PutUserBaseInfo(context.Context, *PutUserBaseRequest, *ErrorResponse) error
	// 通过第三方code获取用户token注册第账户
	GetUserTokenByOauthCode(context.Context, *OauthLoginRequest, *UserInfoWithToken) error
	// 获取用户密码状态
	GetUserPasswordRandomStatus(context.Context, *UIDInput, *PasswordRandomStatus) error
	// 绑定邮箱
	BindUserContactEmail(context.Context, *PutUserContactEmailRequest, *ErrorResponse) error
	// 绑定手机号
	BindUserContactPhone(context.Context, *PutUserContactPhoneRequest, *ErrorResponse) error
	// 获取用户联系方式信息
	GetUserContactInfo(context.Context, *UIDInput, *UserContact) error
	// 获取用户角色
	GetUserNewRoles(context.Context, *UIDInput, *NewRoleList) error
	// 获取用户的权限
	GetUserPermissions(context.Context, *UIDInput, *PermissionInfoList) error
	// 设置角色
	SetUserRole(context.Context, *SetUserRoleRequest, *ErrorResponse) error
	// 删除角色
	DelUserRole(context.Context, *SetUserRoleRequest, *ErrorResponse) error
	// 新建角色 2020-02-24
	PostNewRole(context.Context, *NewRoleRequest, *ErrorResponse) error
	// 更新角色
	PutNewRole(context.Context, *NewRoleRequest, *ErrorResponse) error
	// 删除角色
	DelNewRole(context.Context, *NewRoleRequest, *ErrorResponse) error
	// 获取所有角色
	GetNewRoles(context.Context, *NewRoleRequest, *NewRoleList) error
	// 获取用户UID
	GetUserUID(context.Context, *CreateUserInput, *UIDInput) error
	// vapcha验证
	GetVaptchaVerify(context.Context, *VaptchaVerifyRequest, *ErrorResponse) error
	// vapcha离线验证
	GetVaptchaOfflineVerify(context.Context, *VaptchaVerifyOfflineRequest, *ErrorResponse) error
}

func RegisterAccountSVHandler(s server.Server, hdlr AccountSVHandler, opts ...server.HandlerOption) error {
	type accountSV interface {
		GetUserInfo(ctx context.Context, in *UIDInput, out *UserInfo) error
		GetUsersInfoByIDS(ctx context.Context, in *UIDSInput, out *UserInfoList) error
		GetUserInfoByToken(ctx context.Context, in *UserToken, out *UserInfo) error
		CreateUserInfoByLoginName(ctx context.Context, in *CreateUserInput, out *ErrorResponse) error
		GetUserToken(ctx context.Context, in *UserLoginRequest, out *UserInfoWithToken) error
		CheckNickname(ctx context.Context, in *UserInfo, out *ErrorResponse) error
		CheckPhone(ctx context.Context, in *UserInfo, out *ErrorResponse) error
		CheckEmail(ctx context.Context, in *UserInfo, out *ErrorResponse) error
		CheckLoginName(ctx context.Context, in *UserInfo, out *ErrorResponse) error
		PutUserPassword(ctx context.Context, in *PutPassowrdRequest, out *ErrorResponse) error
		PutUserBaseInfo(ctx context.Context, in *PutUserBaseRequest, out *ErrorResponse) error
		GetUserTokenByOauthCode(ctx context.Context, in *OauthLoginRequest, out *UserInfoWithToken) error
		GetUserPasswordRandomStatus(ctx context.Context, in *UIDInput, out *PasswordRandomStatus) error
		BindUserContactEmail(ctx context.Context, in *PutUserContactEmailRequest, out *ErrorResponse) error
		BindUserContactPhone(ctx context.Context, in *PutUserContactPhoneRequest, out *ErrorResponse) error
		GetUserContactInfo(ctx context.Context, in *UIDInput, out *UserContact) error
		GetUserNewRoles(ctx context.Context, in *UIDInput, out *NewRoleList) error
		GetUserPermissions(ctx context.Context, in *UIDInput, out *PermissionInfoList) error
		SetUserRole(ctx context.Context, in *SetUserRoleRequest, out *ErrorResponse) error
		DelUserRole(ctx context.Context, in *SetUserRoleRequest, out *ErrorResponse) error
		PostNewRole(ctx context.Context, in *NewRoleRequest, out *ErrorResponse) error
		PutNewRole(ctx context.Context, in *NewRoleRequest, out *ErrorResponse) error
		DelNewRole(ctx context.Context, in *NewRoleRequest, out *ErrorResponse) error
		GetNewRoles(ctx context.Context, in *NewRoleRequest, out *NewRoleList) error
		GetUserUID(ctx context.Context, in *CreateUserInput, out *UIDInput) error
		GetVaptchaVerify(ctx context.Context, in *VaptchaVerifyRequest, out *ErrorResponse) error
		GetVaptchaOfflineVerify(ctx context.Context, in *VaptchaVerifyOfflineRequest, out *ErrorResponse) error
	}
	type AccountSV struct {
		accountSV
	}
	h := &accountSVHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountSV{h}, opts...))
}

type accountSVHandler struct {
	AccountSVHandler
}

func (h *accountSVHandler) GetUserInfo(ctx context.Context, in *UIDInput, out *UserInfo) error {
	return h.AccountSVHandler.GetUserInfo(ctx, in, out)
}

func (h *accountSVHandler) GetUsersInfoByIDS(ctx context.Context, in *UIDSInput, out *UserInfoList) error {
	return h.AccountSVHandler.GetUsersInfoByIDS(ctx, in, out)
}

func (h *accountSVHandler) GetUserInfoByToken(ctx context.Context, in *UserToken, out *UserInfo) error {
	return h.AccountSVHandler.GetUserInfoByToken(ctx, in, out)
}

func (h *accountSVHandler) CreateUserInfoByLoginName(ctx context.Context, in *CreateUserInput, out *ErrorResponse) error {
	return h.AccountSVHandler.CreateUserInfoByLoginName(ctx, in, out)
}

func (h *accountSVHandler) GetUserToken(ctx context.Context, in *UserLoginRequest, out *UserInfoWithToken) error {
	return h.AccountSVHandler.GetUserToken(ctx, in, out)
}

func (h *accountSVHandler) CheckNickname(ctx context.Context, in *UserInfo, out *ErrorResponse) error {
	return h.AccountSVHandler.CheckNickname(ctx, in, out)
}

func (h *accountSVHandler) CheckPhone(ctx context.Context, in *UserInfo, out *ErrorResponse) error {
	return h.AccountSVHandler.CheckPhone(ctx, in, out)
}

func (h *accountSVHandler) CheckEmail(ctx context.Context, in *UserInfo, out *ErrorResponse) error {
	return h.AccountSVHandler.CheckEmail(ctx, in, out)
}

func (h *accountSVHandler) CheckLoginName(ctx context.Context, in *UserInfo, out *ErrorResponse) error {
	return h.AccountSVHandler.CheckLoginName(ctx, in, out)
}

func (h *accountSVHandler) PutUserPassword(ctx context.Context, in *PutPassowrdRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.PutUserPassword(ctx, in, out)
}

func (h *accountSVHandler) PutUserBaseInfo(ctx context.Context, in *PutUserBaseRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.PutUserBaseInfo(ctx, in, out)
}

func (h *accountSVHandler) GetUserTokenByOauthCode(ctx context.Context, in *OauthLoginRequest, out *UserInfoWithToken) error {
	return h.AccountSVHandler.GetUserTokenByOauthCode(ctx, in, out)
}

func (h *accountSVHandler) GetUserPasswordRandomStatus(ctx context.Context, in *UIDInput, out *PasswordRandomStatus) error {
	return h.AccountSVHandler.GetUserPasswordRandomStatus(ctx, in, out)
}

func (h *accountSVHandler) BindUserContactEmail(ctx context.Context, in *PutUserContactEmailRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.BindUserContactEmail(ctx, in, out)
}

func (h *accountSVHandler) BindUserContactPhone(ctx context.Context, in *PutUserContactPhoneRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.BindUserContactPhone(ctx, in, out)
}

func (h *accountSVHandler) GetUserContactInfo(ctx context.Context, in *UIDInput, out *UserContact) error {
	return h.AccountSVHandler.GetUserContactInfo(ctx, in, out)
}

func (h *accountSVHandler) GetUserNewRoles(ctx context.Context, in *UIDInput, out *NewRoleList) error {
	return h.AccountSVHandler.GetUserNewRoles(ctx, in, out)
}

func (h *accountSVHandler) GetUserPermissions(ctx context.Context, in *UIDInput, out *PermissionInfoList) error {
	return h.AccountSVHandler.GetUserPermissions(ctx, in, out)
}

func (h *accountSVHandler) SetUserRole(ctx context.Context, in *SetUserRoleRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.SetUserRole(ctx, in, out)
}

func (h *accountSVHandler) DelUserRole(ctx context.Context, in *SetUserRoleRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.DelUserRole(ctx, in, out)
}

func (h *accountSVHandler) PostNewRole(ctx context.Context, in *NewRoleRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.PostNewRole(ctx, in, out)
}

func (h *accountSVHandler) PutNewRole(ctx context.Context, in *NewRoleRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.PutNewRole(ctx, in, out)
}

func (h *accountSVHandler) DelNewRole(ctx context.Context, in *NewRoleRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.DelNewRole(ctx, in, out)
}

func (h *accountSVHandler) GetNewRoles(ctx context.Context, in *NewRoleRequest, out *NewRoleList) error {
	return h.AccountSVHandler.GetNewRoles(ctx, in, out)
}

func (h *accountSVHandler) GetUserUID(ctx context.Context, in *CreateUserInput, out *UIDInput) error {
	return h.AccountSVHandler.GetUserUID(ctx, in, out)
}

func (h *accountSVHandler) GetVaptchaVerify(ctx context.Context, in *VaptchaVerifyRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.GetVaptchaVerify(ctx, in, out)
}

func (h *accountSVHandler) GetVaptchaOfflineVerify(ctx context.Context, in *VaptchaVerifyOfflineRequest, out *ErrorResponse) error {
	return h.AccountSVHandler.GetVaptchaOfflineVerify(ctx, in, out)
}
