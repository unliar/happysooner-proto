// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: push/push.proto

package push

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PushSV service

type PushSVService interface {
	// 发送验证码
	PushCaptcha(ctx context.Context, in *PushCaptchaRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 校验验证码
	GetCaptchaVerify(ctx context.Context, in *GetCaptchaVerifyRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 发送邮件通知
	PushEmailNotification(ctx context.Context, in *PushEmailNotificationRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 存储订单临时邮件信息
	StoreOrderMail(ctx context.Context, in *StoreOrderMailRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 消费订单邮件信息
	PostOrderMail(ctx context.Context, in *StoreOrderMailRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 发送微信机器人通知
	PushWechatWorkGroupRobotNotification(ctx context.Context, in *PushWechatWorkGroupRobotNotificationRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 获取微信 accessToken
	GetWechatAccessToken(ctx context.Context, in *GetWechatAccessTokenRequest, opts ...client.CallOption) (*CommonResponse, error)
}

type pushSVService struct {
	c    client.Client
	name string
}

func NewPushSVService(name string, c client.Client) PushSVService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "push"
	}
	return &pushSVService{
		c:    c,
		name: name,
	}
}

func (c *pushSVService) PushCaptcha(ctx context.Context, in *PushCaptchaRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "PushSV.PushCaptcha", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSVService) GetCaptchaVerify(ctx context.Context, in *GetCaptchaVerifyRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "PushSV.GetCaptchaVerify", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSVService) PushEmailNotification(ctx context.Context, in *PushEmailNotificationRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "PushSV.PushEmailNotification", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSVService) StoreOrderMail(ctx context.Context, in *StoreOrderMailRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "PushSV.StoreOrderMail", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSVService) PostOrderMail(ctx context.Context, in *StoreOrderMailRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "PushSV.PostOrderMail", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSVService) PushWechatWorkGroupRobotNotification(ctx context.Context, in *PushWechatWorkGroupRobotNotificationRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "PushSV.PushWechatWorkGroupRobotNotification", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSVService) GetWechatAccessToken(ctx context.Context, in *GetWechatAccessTokenRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "PushSV.GetWechatAccessToken", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushSV service

type PushSVHandler interface {
	// 发送验证码
	PushCaptcha(context.Context, *PushCaptchaRequest, *ErrorResponse) error
	// 校验验证码
	GetCaptchaVerify(context.Context, *GetCaptchaVerifyRequest, *ErrorResponse) error
	// 发送邮件通知
	PushEmailNotification(context.Context, *PushEmailNotificationRequest, *ErrorResponse) error
	// 存储订单临时邮件信息
	StoreOrderMail(context.Context, *StoreOrderMailRequest, *ErrorResponse) error
	// 消费订单邮件信息
	PostOrderMail(context.Context, *StoreOrderMailRequest, *ErrorResponse) error
	// 发送微信机器人通知
	PushWechatWorkGroupRobotNotification(context.Context, *PushWechatWorkGroupRobotNotificationRequest, *ErrorResponse) error
	// 获取微信 accessToken
	GetWechatAccessToken(context.Context, *GetWechatAccessTokenRequest, *CommonResponse) error
}

func RegisterPushSVHandler(s server.Server, hdlr PushSVHandler, opts ...server.HandlerOption) error {
	type pushSV interface {
		PushCaptcha(ctx context.Context, in *PushCaptchaRequest, out *ErrorResponse) error
		GetCaptchaVerify(ctx context.Context, in *GetCaptchaVerifyRequest, out *ErrorResponse) error
		PushEmailNotification(ctx context.Context, in *PushEmailNotificationRequest, out *ErrorResponse) error
		StoreOrderMail(ctx context.Context, in *StoreOrderMailRequest, out *ErrorResponse) error
		PostOrderMail(ctx context.Context, in *StoreOrderMailRequest, out *ErrorResponse) error
		PushWechatWorkGroupRobotNotification(ctx context.Context, in *PushWechatWorkGroupRobotNotificationRequest, out *ErrorResponse) error
		GetWechatAccessToken(ctx context.Context, in *GetWechatAccessTokenRequest, out *CommonResponse) error
	}
	type PushSV struct {
		pushSV
	}
	h := &pushSVHandler{hdlr}
	return s.Handle(s.NewHandler(&PushSV{h}, opts...))
}

type pushSVHandler struct {
	PushSVHandler
}

func (h *pushSVHandler) PushCaptcha(ctx context.Context, in *PushCaptchaRequest, out *ErrorResponse) error {
	return h.PushSVHandler.PushCaptcha(ctx, in, out)
}

func (h *pushSVHandler) GetCaptchaVerify(ctx context.Context, in *GetCaptchaVerifyRequest, out *ErrorResponse) error {
	return h.PushSVHandler.GetCaptchaVerify(ctx, in, out)
}

func (h *pushSVHandler) PushEmailNotification(ctx context.Context, in *PushEmailNotificationRequest, out *ErrorResponse) error {
	return h.PushSVHandler.PushEmailNotification(ctx, in, out)
}

func (h *pushSVHandler) StoreOrderMail(ctx context.Context, in *StoreOrderMailRequest, out *ErrorResponse) error {
	return h.PushSVHandler.StoreOrderMail(ctx, in, out)
}

func (h *pushSVHandler) PostOrderMail(ctx context.Context, in *StoreOrderMailRequest, out *ErrorResponse) error {
	return h.PushSVHandler.PostOrderMail(ctx, in, out)
}

func (h *pushSVHandler) PushWechatWorkGroupRobotNotification(ctx context.Context, in *PushWechatWorkGroupRobotNotificationRequest, out *ErrorResponse) error {
	return h.PushSVHandler.PushWechatWorkGroupRobotNotification(ctx, in, out)
}

func (h *pushSVHandler) GetWechatAccessToken(ctx context.Context, in *GetWechatAccessTokenRequest, out *CommonResponse) error {
	return h.PushSVHandler.GetWechatAccessToken(ctx, in, out)
}
