// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: search/search.proto

package search

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SearchSV service

type SearchSVService interface {
	// 获取搜索结果
	GetSearchByType(ctx context.Context, in *GetSearchRequest, opts ...client.CallOption) (*SearchResult, error)
	// 删除某个搜索Object
	DelSearchByObject(ctx context.Context, in *DelSearchRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 删除某个搜索Bucket
	DelSearchByBucket(ctx context.Context, in *DelSearchRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 删除某个搜索Collection
	DelSearchByCollection(ctx context.Context, in *DelSearchRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 插入搜索资源数据
	PostSearchSource(ctx context.Context, in *PostSearchSourceRequest, opts ...client.CallOption) (*ErrorResponse, error)
}

type searchSVService struct {
	c    client.Client
	name string
}

func NewSearchSVService(name string, c client.Client) SearchSVService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "search"
	}
	return &searchSVService{
		c:    c,
		name: name,
	}
}

func (c *searchSVService) GetSearchByType(ctx context.Context, in *GetSearchRequest, opts ...client.CallOption) (*SearchResult, error) {
	req := c.c.NewRequest(c.name, "SearchSV.GetSearchByType", in)
	out := new(SearchResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchSVService) DelSearchByObject(ctx context.Context, in *DelSearchRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "SearchSV.DelSearchByObject", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchSVService) DelSearchByBucket(ctx context.Context, in *DelSearchRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "SearchSV.DelSearchByBucket", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchSVService) DelSearchByCollection(ctx context.Context, in *DelSearchRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "SearchSV.DelSearchByCollection", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchSVService) PostSearchSource(ctx context.Context, in *PostSearchSourceRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "SearchSV.PostSearchSource", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchSV service

type SearchSVHandler interface {
	// 获取搜索结果
	GetSearchByType(context.Context, *GetSearchRequest, *SearchResult) error
	// 删除某个搜索Object
	DelSearchByObject(context.Context, *DelSearchRequest, *ErrorResponse) error
	// 删除某个搜索Bucket
	DelSearchByBucket(context.Context, *DelSearchRequest, *ErrorResponse) error
	// 删除某个搜索Collection
	DelSearchByCollection(context.Context, *DelSearchRequest, *ErrorResponse) error
	// 插入搜索资源数据
	PostSearchSource(context.Context, *PostSearchSourceRequest, *ErrorResponse) error
}

func RegisterSearchSVHandler(s server.Server, hdlr SearchSVHandler, opts ...server.HandlerOption) error {
	type searchSV interface {
		GetSearchByType(ctx context.Context, in *GetSearchRequest, out *SearchResult) error
		DelSearchByObject(ctx context.Context, in *DelSearchRequest, out *ErrorResponse) error
		DelSearchByBucket(ctx context.Context, in *DelSearchRequest, out *ErrorResponse) error
		DelSearchByCollection(ctx context.Context, in *DelSearchRequest, out *ErrorResponse) error
		PostSearchSource(ctx context.Context, in *PostSearchSourceRequest, out *ErrorResponse) error
	}
	type SearchSV struct {
		searchSV
	}
	h := &searchSVHandler{hdlr}
	return s.Handle(s.NewHandler(&SearchSV{h}, opts...))
}

type searchSVHandler struct {
	SearchSVHandler
}

func (h *searchSVHandler) GetSearchByType(ctx context.Context, in *GetSearchRequest, out *SearchResult) error {
	return h.SearchSVHandler.GetSearchByType(ctx, in, out)
}

func (h *searchSVHandler) DelSearchByObject(ctx context.Context, in *DelSearchRequest, out *ErrorResponse) error {
	return h.SearchSVHandler.DelSearchByObject(ctx, in, out)
}

func (h *searchSVHandler) DelSearchByBucket(ctx context.Context, in *DelSearchRequest, out *ErrorResponse) error {
	return h.SearchSVHandler.DelSearchByBucket(ctx, in, out)
}

func (h *searchSVHandler) DelSearchByCollection(ctx context.Context, in *DelSearchRequest, out *ErrorResponse) error {
	return h.SearchSVHandler.DelSearchByCollection(ctx, in, out)
}

func (h *searchSVHandler) PostSearchSource(ctx context.Context, in *PostSearchSourceRequest, out *ErrorResponse) error {
	return h.SearchSVHandler.PostSearchSource(ctx, in, out)
}
