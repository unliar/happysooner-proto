// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: writing/writing.proto

// 内容创作模块

package writing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WritingSV service

func NewWritingSVEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WritingSV service

type WritingSVService interface {
	// 获取文章详情
	GetArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...client.CallOption) (*ArticleInfo, error)
	// 使用ID列表获取文章列表 todo
	GetArticleListByIds(ctx context.Context, in *IDList, opts ...client.CallOption) (*ArticleListResponse, error)
	// 使用ID 获取上一篇和下一篇 todo
	GetPreviousAndNextArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...client.CallOption) (*PreviousAndNextArticleResponse, error)
	// 获取文章列表
	GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...client.CallOption) (*ArticleListResponse, error)
	// 创建文章
	PostArticle(ctx context.Context, in *PostArticleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 更新文章
	PutArticle(ctx context.Context, in *PutArticleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 创建分类
	PostCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*ErrorResponse, error)
	// 获取所有分类
	GetCategories(ctx context.Context, in *Empty, opts ...client.CallOption) (*CategoriesResponse, error)
	// 更新分类
	PutCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*ErrorResponse, error)
	// 创建评论 - 未完成 - 连接计数服务
	PostCommentToArticle(ctx context.Context, in *PostCommentToArticleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 删除评论 - 未完成 - 连接计数服务
	DelCommentToArticle(ctx context.Context, in *DelCommentToArticleRequest, opts ...client.CallOption) (*ErrorResponse, error)
	// 获取文章评论列表 - 完成
	GetCommentListOfArticle(ctx context.Context, in *GetCommentListOfArticleRequest, opts ...client.CallOption) (*CommentListResponse, error)
	// 删除文章的评论列表 - 完成
	DelCommentListOfArticle(ctx context.Context, in *DelCommentListOfArticleRequest, opts ...client.CallOption) (*ErrorResponse, error)
}

type writingSVService struct {
	c    client.Client
	name string
}

func NewWritingSVService(name string, c client.Client) WritingSVService {
	return &writingSVService{
		c:    c,
		name: name,
	}
}

func (c *writingSVService) GetArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...client.CallOption) (*ArticleInfo, error) {
	req := c.c.NewRequest(c.name, "WritingSV.GetArticleById", in)
	out := new(ArticleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) GetArticleListByIds(ctx context.Context, in *IDList, opts ...client.CallOption) (*ArticleListResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.GetArticleListByIds", in)
	out := new(ArticleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) GetPreviousAndNextArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...client.CallOption) (*PreviousAndNextArticleResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.GetPreviousAndNextArticleById", in)
	out := new(PreviousAndNextArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...client.CallOption) (*ArticleListResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.GetArticleList", in)
	out := new(ArticleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) PostArticle(ctx context.Context, in *PostArticleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.PostArticle", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) PutArticle(ctx context.Context, in *PutArticleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.PutArticle", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) PostCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.PostCategory", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) GetCategories(ctx context.Context, in *Empty, opts ...client.CallOption) (*CategoriesResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.GetCategories", in)
	out := new(CategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) PutCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.PutCategory", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) PostCommentToArticle(ctx context.Context, in *PostCommentToArticleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.PostCommentToArticle", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) DelCommentToArticle(ctx context.Context, in *DelCommentToArticleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.DelCommentToArticle", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) GetCommentListOfArticle(ctx context.Context, in *GetCommentListOfArticleRequest, opts ...client.CallOption) (*CommentListResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.GetCommentListOfArticle", in)
	out := new(CommentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writingSVService) DelCommentListOfArticle(ctx context.Context, in *DelCommentListOfArticleRequest, opts ...client.CallOption) (*ErrorResponse, error) {
	req := c.c.NewRequest(c.name, "WritingSV.DelCommentListOfArticle", in)
	out := new(ErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WritingSV service

type WritingSVHandler interface {
	// 获取文章详情
	GetArticleById(context.Context, *GetArticleByIdRequest, *ArticleInfo) error
	// 使用ID列表获取文章列表 todo
	GetArticleListByIds(context.Context, *IDList, *ArticleListResponse) error
	// 使用ID 获取上一篇和下一篇 todo
	GetPreviousAndNextArticleById(context.Context, *GetArticleByIdRequest, *PreviousAndNextArticleResponse) error
	// 获取文章列表
	GetArticleList(context.Context, *GetArticleListRequest, *ArticleListResponse) error
	// 创建文章
	PostArticle(context.Context, *PostArticleRequest, *ErrorResponse) error
	// 更新文章
	PutArticle(context.Context, *PutArticleRequest, *ErrorResponse) error
	// 创建分类
	PostCategory(context.Context, *Category, *ErrorResponse) error
	// 获取所有分类
	GetCategories(context.Context, *Empty, *CategoriesResponse) error
	// 更新分类
	PutCategory(context.Context, *Category, *ErrorResponse) error
	// 创建评论 - 未完成 - 连接计数服务
	PostCommentToArticle(context.Context, *PostCommentToArticleRequest, *ErrorResponse) error
	// 删除评论 - 未完成 - 连接计数服务
	DelCommentToArticle(context.Context, *DelCommentToArticleRequest, *ErrorResponse) error
	// 获取文章评论列表 - 完成
	GetCommentListOfArticle(context.Context, *GetCommentListOfArticleRequest, *CommentListResponse) error
	// 删除文章的评论列表 - 完成
	DelCommentListOfArticle(context.Context, *DelCommentListOfArticleRequest, *ErrorResponse) error
}

func RegisterWritingSVHandler(s server.Server, hdlr WritingSVHandler, opts ...server.HandlerOption) error {
	type writingSV interface {
		GetArticleById(ctx context.Context, in *GetArticleByIdRequest, out *ArticleInfo) error
		GetArticleListByIds(ctx context.Context, in *IDList, out *ArticleListResponse) error
		GetPreviousAndNextArticleById(ctx context.Context, in *GetArticleByIdRequest, out *PreviousAndNextArticleResponse) error
		GetArticleList(ctx context.Context, in *GetArticleListRequest, out *ArticleListResponse) error
		PostArticle(ctx context.Context, in *PostArticleRequest, out *ErrorResponse) error
		PutArticle(ctx context.Context, in *PutArticleRequest, out *ErrorResponse) error
		PostCategory(ctx context.Context, in *Category, out *ErrorResponse) error
		GetCategories(ctx context.Context, in *Empty, out *CategoriesResponse) error
		PutCategory(ctx context.Context, in *Category, out *ErrorResponse) error
		PostCommentToArticle(ctx context.Context, in *PostCommentToArticleRequest, out *ErrorResponse) error
		DelCommentToArticle(ctx context.Context, in *DelCommentToArticleRequest, out *ErrorResponse) error
		GetCommentListOfArticle(ctx context.Context, in *GetCommentListOfArticleRequest, out *CommentListResponse) error
		DelCommentListOfArticle(ctx context.Context, in *DelCommentListOfArticleRequest, out *ErrorResponse) error
	}
	type WritingSV struct {
		writingSV
	}
	h := &writingSVHandler{hdlr}
	return s.Handle(s.NewHandler(&WritingSV{h}, opts...))
}

type writingSVHandler struct {
	WritingSVHandler
}

func (h *writingSVHandler) GetArticleById(ctx context.Context, in *GetArticleByIdRequest, out *ArticleInfo) error {
	return h.WritingSVHandler.GetArticleById(ctx, in, out)
}

func (h *writingSVHandler) GetArticleListByIds(ctx context.Context, in *IDList, out *ArticleListResponse) error {
	return h.WritingSVHandler.GetArticleListByIds(ctx, in, out)
}

func (h *writingSVHandler) GetPreviousAndNextArticleById(ctx context.Context, in *GetArticleByIdRequest, out *PreviousAndNextArticleResponse) error {
	return h.WritingSVHandler.GetPreviousAndNextArticleById(ctx, in, out)
}

func (h *writingSVHandler) GetArticleList(ctx context.Context, in *GetArticleListRequest, out *ArticleListResponse) error {
	return h.WritingSVHandler.GetArticleList(ctx, in, out)
}

func (h *writingSVHandler) PostArticle(ctx context.Context, in *PostArticleRequest, out *ErrorResponse) error {
	return h.WritingSVHandler.PostArticle(ctx, in, out)
}

func (h *writingSVHandler) PutArticle(ctx context.Context, in *PutArticleRequest, out *ErrorResponse) error {
	return h.WritingSVHandler.PutArticle(ctx, in, out)
}

func (h *writingSVHandler) PostCategory(ctx context.Context, in *Category, out *ErrorResponse) error {
	return h.WritingSVHandler.PostCategory(ctx, in, out)
}

func (h *writingSVHandler) GetCategories(ctx context.Context, in *Empty, out *CategoriesResponse) error {
	return h.WritingSVHandler.GetCategories(ctx, in, out)
}

func (h *writingSVHandler) PutCategory(ctx context.Context, in *Category, out *ErrorResponse) error {
	return h.WritingSVHandler.PutCategory(ctx, in, out)
}

func (h *writingSVHandler) PostCommentToArticle(ctx context.Context, in *PostCommentToArticleRequest, out *ErrorResponse) error {
	return h.WritingSVHandler.PostCommentToArticle(ctx, in, out)
}

func (h *writingSVHandler) DelCommentToArticle(ctx context.Context, in *DelCommentToArticleRequest, out *ErrorResponse) error {
	return h.WritingSVHandler.DelCommentToArticle(ctx, in, out)
}

func (h *writingSVHandler) GetCommentListOfArticle(ctx context.Context, in *GetCommentListOfArticleRequest, out *CommentListResponse) error {
	return h.WritingSVHandler.GetCommentListOfArticle(ctx, in, out)
}

func (h *writingSVHandler) DelCommentListOfArticle(ctx context.Context, in *DelCommentListOfArticleRequest, out *ErrorResponse) error {
	return h.WritingSVHandler.DelCommentListOfArticle(ctx, in, out)
}
